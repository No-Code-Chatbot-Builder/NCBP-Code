# Using the official Node.js 20 image as the base image for the builder stage.
# This version of Node.js is built on the lightweight Alpine Linux.
FROM node:20-alpine as builder

# Setting the working directory in the container to /usr/src/app.
# This directory will be used to store our application code inside the container.
WORKDIR /usr/src/app

# Copying package.json and package-lock.json from the host to the container.
# The * wildcard ensures that both package.json and package-lock.json are copied.
# These files define the project's dependencies.
COPY package*.json ./

# Installing all dependencies specified in package.json.
# This includes both runtime dependencies and 'devDependencies',
# the latter are required for TypeScript compilation.
#RUN npm install -g npm@9.4.1

# Copying the entire application source code from the host to the container.
# This includes all files and directories in the current directory on the host.
COPY . .

# ENV VARIABLES

# Compiling the TypeScript application to JavaScript.
# This step transforms the TypeScript code into executable JavaScript code.
RUN npm run build

# Starting a new stage for the production build, using the Node.js 20 Alpine image again.
# This multi-stage build approach allows us to keep the final image size smaller,
# as it only contains the runtime dependencies and compiled code.
FROM node:20-alpine as production

# Setting the NODE_ENV environment variable to 'production'.
# This is an industry standard for Node.js applications to differentiate between
# development and production environments.
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Setting the working directory in this production stage to /usr/src/app.
WORKDIR /usr/src/app

# Copying package.json and package-lock.json again in the production stage.
# This is necessary to install only the production dependencies in the next step.
COPY package*.json ./

# COPY .env /usr/src/app/.env
# Installing only the production dependencies.
# The --only=production flag tells npm to omit 'devDependencies',
# which are not needed in the production environment.
RUN npm install --only=production --force

# Copying the compiled JavaScript code from the 'builder' stage.
# The /usr/src/app/dist directory contains the output from the TypeScript compilation.
COPY --from=builder /usr/src/app/dist ./dist

# Exposing port 80, which is the port our application will listen on.
# This is a convention in Node.js applications and allows the app to be accessed from outside the container.
EXPOSE 80

# Defining the command to start the application using Node.js.
# This command will run the compiled JavaScript starting script located in the /dist directory.
CMD ["node", "dist/main"]
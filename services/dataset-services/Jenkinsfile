pipeline {
    agent any

    environment {
        ECR_REGISTRY = '637423235266.dkr.ecr.us-east-1.amazonaws.com'
        IMAGE_REPO_NAME = 'dataset-service'
        IMAGE_TAG = 'test'
        DYNAMODB_TABLE_NAME = 'ncbp'
        S3_BUCKET_NAME = 'ncbp-assets'
        PINECONE_INDEX_NAME = 'test'
        USER_POOL_ID = 'us-east-1_X8yePKlex'
        CLIENT_ID = 'e34tkhfoepujgre0imt7gikpt'
        
        AWS_DEFAULT_REGION = 'us-east-1'
        AWS_ACCESS_KEY_ID = 'AKIAZI2LCWDBE6ALXS4B'
        AWS_SECRET_ACCESS_KEY = credentials('3ea6997c-f02f-4cb6-a3cd-6e7ec64262da')
        PINECONE_API_KEY = credentials('a2be5c16-949f-43ad-97f8-f1a9a28e342f')

    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Check Workspace') {
            steps {
                dir('services/dataset-services') {
                    bat "dir" // Lists the files in the current directory on Windows
                }
                
            }
        }

        stage('Build and Tag Image') {
            steps {
                dir('services/dataset-services') {
                    bat "docker build -t ${ECR_REGISTRY}/${IMAGE_REPO_NAME}:${IMAGE_TAG} -f Dockerfile-dev ."
                    bat "docker tag ${ECR_REGISTRY}/${IMAGE_REPO_NAME}:${IMAGE_TAG} ${ECR_REGISTRY}/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                bat "powershell -Command '(Get-ECRLoginCommand).Password | docker login --username AWS --password-stdin ${ECR_REGISTRY}'"
                bat "docker push ${ECR_REGISTRY}/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
            }
        }
        
        stage('Test') {
            steps {
                bat 'echo Running tests...'
                // Add your actual test commands here
            }
        }
        
        stage('Deploy') {
            steps {
                bat 'echo Deploying application...'
                // Add your actual deploy commands here
            }
        }
    }
    
    post {
        always {
            echo 'This will always run regardless of the result.'
        }
        success {
            echo 'Build was successful!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}


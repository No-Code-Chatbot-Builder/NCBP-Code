pipeline {
    agent any

    environment {
        // Define the ECR-related environment variables
        ECR_REGISTRY = '637423235266.dkr.ecr.us-east-1.amazonaws.com'
        IMAGE_REPO_NAME = 'dataset-service'
        IMAGE_TAG = 'latest'

        // Define ECS-related environment variables
        ECS_CLUSTER_NAME = 'test-cluster'
        ECS_SERVICE_NAME = 'test-service'
        ECS_TASK_FAMILY_NAME = 'test-family'
        ECS_TASK_DEFINITION_FILE = 'container-definition.json' // Path relative to the repo root

        // Define AWS environment variables
        AWS_DEFAULT_REGION = 'us-east-1'
        AWS_CREDENTIALS_ID = 'AWS_ACCESS_SECRET_KEYS' // Assuming you have this setup in Jenkins credentials
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build and Tag Image') {
            steps {
                dir('services/dataset-services') {
                    bat "docker build -t ${ECR_REGISTRY}/${IMAGE_REPO_NAME}:${IMAGE_TAG} -f Dockerfile-dev ."
                    bat "docker tag ${ECR_REGISTRY}/${IMAGE_REPO_NAME}:${IMAGE_TAG} ${ECR_REGISTRY}/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Push to ECR') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_ACCESS_SECRET_KEYS']]) {
                    bat "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}"
                    bat "docker push ${ECR_REGISTRY}/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('ECS Cluster') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_ACCESS_SECRET_KEYS']]) {
                    script {
                            echo "Creating ECS cluster named ${ECS_CLUSTER_NAME}."
                            bat "aws ecs create-cluster --cluster-name ${ECS_CLUSTER_NAME}"
                    }
                }
            }
        }
        

        stage('Register ECS Task Definition') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_ACCESS_SECRET_KEYS']]) {
                    dir('services/dataset-services') {
                        bat "aws ecs register-task-definition --cli-input-json file://${ECS_TASK_DEFINITION_FILE} --family ${ECS_TASK_FAMILY_NAME}"
                    }
                }
            }
        }

        stage('Deploy to ECS') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId:'AWS_ACCESS_SECRET_KEYS']]) {
                    bat script: """
                aws ecs create-service --cluster ${ECS_CLUSTER_NAME} \
                --service-name ${ECS_SERVICE_NAME} \
                --task-definition ${ECS_TASK_FAMILY_NAME} \
                --desired-count 1 \
                --launch-type FARGATE \
                --region ${AWS_DEFAULT_REGION}
            """
                }
            }
        }

        stage('Test') {
            steps {
                bat 'echo Running tests...'
            }
        }

        stage('Deploy') {
            steps {
                bat 'echo Deploying application...'
            }
        }
    }

    post {
        always {
            echo 'This will always run regardless of the result.'
        }
        success {
            echo 'Build was successful!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}
